const axios = require('axios');
const { cmd } = require('../command');

cmd({
    pattern: "dog",
    desc: "Fetch a random dog image.",
    category: "fun",
    react: "üê∂",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        const apiUrl = `https://dog.ceo/api/breeds/image/random`;
        const response = await axios.get(apiUrl);
        const data = response.data;

        await conn.sendMessage(from, { image: { url: data.message }, caption: 'üê∂ * Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥Ö·¥è…¢ …™·¥ç…¢* üê∂\n> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ä…¥…™ ü·¥Ä  ü·¥è·¥Ñ ú·¥Ä…¥·¥Ä*' }, { quoted: mek });
    } catch (e) {
        console.log(e);
        reply(`—î—è—èœÉ—è ∆í—î—Ç¬¢–ΩŒπŒ∑g ‚àÇœÉg Œπ–ºŒ±g—î: ${e.message}`);
    }
});


cmd({
    pattern: "fact",
    desc: "üß† Get a random fun fact",
    react: "ü§ì",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, q, reply }) => {
    try {
        const url = 'https://uselessfacts.jsph.pl/random.json?language=en';  // API for random facts
        const response = await axios.get(url);
        const fact = response.data.text;

        const funFact = `
üß† * Ä·¥Ä…¥·¥Ö·¥è·¥ç Íú∞·¥ú…¥ Íú∞·¥Ä·¥Ñ·¥õ* üß†

${fact}

Isn't that interesting? üòÑ
`;

        return reply(funFact);
    } catch (e) {
        console.log(e);
        return reply("‚ö†Ô∏è Œ±Œ∑ —î—è—èœÉ—è œÉ¬¢¬¢œÖ—è—è—î‚àÇ œâ–ΩŒπ‚Ñì—î ∆í—î—Ç¬¢–ΩŒπŒ∑g Œ± ∆íœÖŒ∑ ∆íŒ±¬¢—Ç. œÅ‚Ñì—îŒ±—ï—î —Ç—è—É Œ±gŒ±ŒπŒ∑ ‚ÑìŒ±—Ç—î—è.");
    }
});

cmd({
    pattern: "hack",
    desc: "Displays a dynamic and playful 'Hacking' message for fun.",
    category: "fun",
    react: "üíª",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        const steps = [
            'üíª *HACK STARTING...* üíª',
            '',
            '*Initializing hacking tools...* üõ†Ô∏è',
            '*Connecting to remote servers...* üåê',
            '',
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 10%``` ‚è≥'                                            ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 20%``` ‚è≥'                                   ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 30%``` ‚è≥'                               ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 40%``` ‚è≥'                            ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 50%``` ‚è≥'                       ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 60%``` ‚è≥'                 ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 70%``` ‚è≥'            ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 80%``` ‚è≥'        ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 90%``` ‚è≥'    ,
            '```[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà] 100%``` ‚úÖ',
            '',
            'üîí *System Breach: Successful!* üîì',
            'üöÄ *Command Execution: Complete!* üéØ',
            '',
            '*üì° Transmitting data...* üì§',
            '_üïµÔ∏è‚Äç‚ôÇÔ∏è Ensuring stealth..._ ü§´',
            '*üîß Finalizing operations...* üèÅ',
            '',
            '‚ö†Ô∏è *Note:* All actions are for demonstration purposes only.',
            '‚ö†Ô∏è *Reminder:* Ethical hacking is the only way to ensure security.',
            '',
            '> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ä…¥…™ ü·¥Ä  ü·¥è·¥Ñ ú·¥Ä…¥·¥Ä*'
        ];

        for (const line of steps) {
            await conn.sendMessage(from, { text: line }, { quoted: mek });
            await new Promise(resolve => setTimeout(resolve, 1000)); // Adjust the delay as needed
        }
    } catch (e) {
        console.log(e);
        reply(`‚ùå *Error!* ${e.message}`);
    }
});


cmd({
    pattern: "joke",
    desc: "üòÇ Get a random joke",
    react: "ü§£",
    category: "fun",
    filename: __filename
},
async (conn, mek, m, { from, q, reply }) => {
    try {
        const url = 'https://official-joke-api.appspot.com/random_joke';  // API for random jokes
        const response = await axios.get(url);
        const joke = response.data;

        const jokeMessage = `
üòÇ *Here's a random joke for you!* üòÇ

*${joke.setup}*

${joke.punchline} üòÑ

> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ä…¥…™ ü·¥Ä  ü·¥è·¥Ñ ú·¥Ä…¥·¥Ä* `;

        return reply(jokeMessage);
    } catch (e) {
        console.log(e);
        return reply("‚ö†Ô∏è ¬¢œÉœÖ‚Ñì‚àÇŒ∑'—Ç ∆í—î—Ç¬¢–Ω Œ± ◊†œÉ–∫—î —èŒπg–Ω—Ç Œ∑œÉœâ. œÅ‚Ñì—îŒ±—ï—î —Ç—è—É Œ±gŒ±ŒπŒ∑ ‚ÑìŒ±—Ç—î—è.");
    }
});

cmd({
    pattern: "quote",
    desc: "Get a random inspiring quote.",
    category: "fun",
    react: "È¶ÉÊå∞",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const response = await axios.get('https://api.quotable.io/random');
        const quote = response.data;
        const message = `
È¶ÉÊå∞ "${quote.content}"
- ${quote.author}
È•æÊÇòÈ•æÊÇóÈ•æÊÇ•È•æÊÇáÈ•æÊÇúÈ•æÊÇáÈ•æÊÇÜ È•æÊÇÇÈ•æÊÇ© È•æÊÇûÈ•æÊÇÅÈ•æÊÇãÈ•æÊÇÅÈ•æÊÇû-È•æÊÇìÈ•æÊÇÜ È•æÊÇôÈ•æÊÇ¢È•æÊÇóÈ•æÊÇ°È•æÊÇáÈ•æÊÇû
        `;
        return reply(message);
    } catch (e) {
        console.error("Error fetching quote:", e);
        reply("ÂûÑËüΩË†ÄÈà©ÊíØÂûà ÁïèËüΩË§å Ëå†Ë§¶Ë§åÂûÑËñ™ ‰º™ qË†ÄËüΩË§åË§¶. ËüªÈà©ÊíóÊñòÊØñÊõÜÔøΩ Ë§åË§üË§ç ‰º™g‰º™ÂñÇÁïè Èà©ÊíêÊØñÂÇÉÊñûÔøΩ.");
    }
});

cmd({
    pattern: "news",
    desc: "Get the latest news headlines.",
    category: "news",
    react: "üì∞",
    filename: __filename
},
async (conn, mek, m, { from, reply }) => {
    try {
        const apiKey="0f2c43ab11324578a7b1709651736382";
        const response = await axios.get(`https://newsapi.org/v2/top-headlines?country=us&apiKey=${apiKey}`);
        const articles = response.data.articles;

        if (!articles.length) return reply("No news articles found.");

        // Send each article as a separate message with image and title
        for (let i = 0; i < Math.min(articles.length, 5); i++) {
            const article = articles[i];
            let message = `
üì∞ *${article.title}*
‚ö†Ô∏è _${article.description}_
üîó _${article.url}_

> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ä…¥…™ ü·¥Ä  ü·¥è·¥Ñ ú·¥Ä…¥·¥Ä*
            `;

            console.log('Article URL:', article.urlToImage); // Log image URL for debugging

            if (article.urlToImage) {
                // Send image with caption
                await conn.sendMessage(from, { image: { url: article.urlToImage }, caption: message });
            } else {
                // Send text message if no image is available
                await conn.sendMessage(from, { text: message });
            }
        };
    } catch (e) {
        console.error("Error fetching news:", e);
        reply("Could not fetch news. Please try again later.");
    }
});


cmd({
    pattern: "animegirl",
    desc: "Fetch a random anime girl image.",
    category: "fun",
    react: "üëß",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        const apiUrl = `https://api.waifu.pics/sfw/waifu`;
        const response = await axios.get(apiUrl);
        const data = response.data;

        await conn.sendMessage(from, { image: { url: data.url }, caption: 'üëß *Random Anime Girl Image* üëß\n> *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥Ä…¥…™ ü·¥Ä  ü·¥è·¥Ñ ú·¥Ä…¥·¥Ä*' }, { quoted: mek });
    } catch (e) {
        console.log(e);
        reply(`*Error Fetching Anime Girl image*: ${e.message}`);
    }
});
